{"version":3,"file":"test035.js","sources":["part06.ts","test035.ts"],"sourcesContent":["export default function ()\n{\n    const fs = `\n    precision mediump float;\n\n    varying vec4 vColor;\n    \n    void main (void)\n    {\n        gl_FragColor = vec4(vColor.r, vColor.g, vColor.b, vColor.a);\n    }\n    `;\n    \n    const vs = `\n    attribute vec4 aColor;\n    attribute vec2 aVertexPosition;\n\n    uniform vec2 resolution;\n\n    varying vec4 vColor;\n    \n    void main (void)\n    {\n        vColor = aColor;\n\n        float x = aVertexPosition.x / resolution.x * 2.0 - 1.0;\n        float y = aVertexPosition.y / resolution.y * -2.0 + 1.0;\n    \n        gl_Position = vec4(x, y, 0.0, 1.0); \n    }\n    `;\n\n    const canvas = document.getElementById('game') as HTMLCanvasElement;\n\n    canvas.width = 800;\n    canvas.height = 600;\n\n    const gl: WebGLRenderingContext = canvas.getContext('webgl');\n    \n    //  Create the shaders\n    \n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    \n    gl.shaderSource(fragmentShader, fs);\n    gl.compileShader(fragmentShader);\n    \n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    \n    gl.shaderSource(vertexShader, vs);\n    gl.compileShader(vertexShader);\n    \n    const program = gl.createProgram();\n    \n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    \n    gl.useProgram(program);\n    \n    const vertexPositionAttrib = gl.getAttribLocation(program, 'aVertexPosition');\n    const vertexColorAttrib = gl.getAttribLocation(program, 'aColor');\n    const projectionVector = gl.getUniformLocation(program, 'resolution');\n\n    gl.enableVertexAttribArray(vertexPositionAttrib);\n    gl.enableVertexAttribArray(vertexColorAttrib);\n    \n    //  We can pass in the vertex coordinates as screen-space values\n    //  instead of clip-space, as they're being converted in the shader\n\n    const vertices = [];\n    const indices = [];\n    let totalQuads = 0;\n\n    /**\n     * This function will add the vertices for a new quad into the vertices\n     * array. It'll also add in the indicies.\n     * \n     * Values are in screen-space.\n     * RGBA values are floats 0-1.\n     */\n    function addQuad (x, y, width = 64, height = 64, r = 1, g = 1, b = 1, a = 1)\n    {\n        //  top-left\n        vertices.push(x, y, r, g, b, a);\n\n        //  bottom-left\n        vertices.push(x, y + height, r, g, b, a);\n\n        //  bottom-right\n        vertices.push(x + width, y + height, r, g, b, a);\n\n        //  top-right\n        vertices.push(x + width, y, r, g, b, a);\n\n        const offset = totalQuads * 4;\n\n        indices.push(\n            offset, offset + 1, offset + 2,\n            offset, offset + 2, offset + 3\n        );\n\n        totalQuads++;\n    }\n\n    //  Generate a bunch of random quads\n    //  This is still static data right now, but we're progressing\n    for (let i = 0; i < 128; i++)\n    {\n        let x = Math.random() * 750;\n        let y = Math.random() * 550;\n        let w = 32 + Math.random() * 64;\n        let h = 32 + Math.random() * 128;\n        let r = Math.random();\n        let g = Math.random();\n        let b = Math.random();\n\n        addQuad(x, y, w, h, r, g, b, 0.75);\n    }\n\n    const vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    const indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    const stride = 24;\n\n    function render ()\n    {\n        gl.clearColor(0, 0, 0, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        //  So alpha works\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n        gl.viewport(0, 0, canvas.width, canvas.height);\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n        gl.uniform2f(projectionVector, canvas.clientWidth, canvas.clientHeight);\n\n        /**\n         * Each vertex contains:\n         * \n         *  position (x,y - 2 floats)\n         *  color (r,g,b,a - 4 floats)\n         * \n         * 6 floats = 6 * 4 bytes = 24 bytes per vertex. This is our stride.\n         * The offset is how much data should be skipped at the start of each chunk.\n         * In our index, the color data is right after the position data.\n         * Position is 2 floats, so the offset for the color is 2 * 4 bytes = 8 bytes.\n         */\n\n        // size: A GLint specifying the number of components per vertex attribute. Must be 1, 2, 3, or 4 (i.e. vec3 = 3)\n        gl.vertexAttribPointer(vertexPositionAttrib, 2, gl.FLOAT, false, stride, 0);\n        gl.vertexAttribPointer(vertexColorAttrib, 4, gl.FLOAT, false, stride, 8);\n\n        gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);\n    }\n    \n    render();\n}\n","import part01 from './part01';\nimport part02 from './part02';\nimport part03 from './part03';\nimport part04 from './part04';\nimport part05 from './part05';\nimport part06 from './part06';\n\npart06();\n"],"names":["fs","vs","canvas","document","getElementById","width","height","gl","getContext","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","vertexShader","VERTEX_SHADER","program","createProgram","attachShader","linkProgram","useProgram","vertexPositionAttrib","getAttribLocation","vertexColorAttrib","projectionVector","getUniformLocation","enableVertexAttribArray","vertices","indices","totalQuads","addQuad","x","y","r","g","b","a","push","offset","i","Math","random","w","h","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","stride","render","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","viewport","uniform2f","clientWidth","clientHeight","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","length","UNSIGNED_SHORT","part06"],"mappings":"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"}