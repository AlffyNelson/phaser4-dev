{"version":3,"file":"test035.js","sources":["../../node_modules/@phaserjs/math-matrix2d/dist/Matrix2D.js","../../node_modules/@phaserjs/math-vec2/dist/Vec2.js","../../node_modules/@phaserjs/math-transform/dist/Transform.js","TexturedSprite.ts","Texture.ts","MultiTexturedQuadShader.ts","../../node_modules/@phaserjs/math-matrix4/dist/Matrix4.js","../../node_modules/@phaserjs/math-matrix4-funcs/dist/Ortho.js","part19.ts","test035.ts"],"sourcesContent":["//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\r\n//  |----|----|----|\r\n//  | a  | b  | 0  |\r\n//  |----|----|----|\r\n//  | c  | d  | 0  |\r\n//  |----|----|----|\r\n//  | tx | ty | 1  |\r\n//  |----|----|----|\r\nexport class Matrix2D {\r\n    /**\r\n     * Creates an instance of Matrix2D.\r\n     *\r\n     * @param {number} [a=1] - X scale.\r\n     * @param {number} [b=0] - X skew.\r\n     * @param {number} [c=0] - Y skew.\r\n     * @param {number} [d=1] - Y scale.\r\n     * @param {number} [tx=0] - X translation\r\n     * @param {number} [ty=0] - Y translation\r\n     * @memberof Matrix2D\r\n     */\r\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.set(a, b, c, d, tx, ty);\r\n    }\r\n    set(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n        return this;\r\n    }\r\n    identity() {\r\n        return this.set();\r\n    }\r\n    toArray() {\r\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\r\n    }\r\n    fromArray(src) {\r\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\r\n    }\r\n    [Symbol.iterator]() {\r\n        const data = this.toArray();\r\n        return data[Symbol.iterator]();\r\n    }\r\n}\r\n//# sourceMappingURL=Matrix2D.js.map","export class Vec2 {\r\n    /**\r\n     * Creates an instance of a Vector2.\r\n     *\r\n     * @param {number} [x=0] - X component\r\n     * @param {number} [y=0] - Y component\r\n     * @memberof Vec2\r\n     */\r\n    constructor(x = 0, y = 0) {\r\n        this.set(x, y);\r\n    }\r\n    /**\r\n     * Sets the components of this Vector2.\r\n     *\r\n     * @param {number} [x=0] - X component\r\n     * @param {number} [y=0] - Y component\r\n     * @returns {Vec2}\r\n     * @memberof Vec2\r\n     */\r\n    set(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets all components of this Vector2 to zero.\r\n     *\r\n     * @returns {Vec2}\r\n     * @memberof Vec2\r\n     */\r\n    zero() {\r\n        return this.set();\r\n    }\r\n    /**\r\n     * Returns a new array containg the Vector2 component values.\r\n     *\r\n     * @returns {number[]}\r\n     * @memberof Vec2\r\n     */\r\n    getArray() {\r\n        return [this.x, this.y];\r\n    }\r\n    /**\r\n     * Sets the values of this Vector2 based on the given array, or array-like object, such as a Float32.\r\n     *\r\n     * The source must have 2 elements, starting from index 0 through to index 1.\r\n     *\r\n     * @param {number[]} src - The source array to copy the values from.\r\n     * @returns {Vec2}\r\n     * @memberof Vec2\r\n     */\r\n    fromArray(src) {\r\n        return this.set(src[0], src[1]);\r\n    }\r\n    [Symbol.iterator]() {\r\n        const data = this.getArray();\r\n        return data[Symbol.iterator]();\r\n    }\r\n}\r\n//# sourceMappingURL=Vec2.js.map","import { Matrix2D } from '@phaserjs/math-matrix2d';\r\nimport { Vec2 } from '@phaserjs/math-vec2';\r\nexport class Transform {\r\n    constructor(x = 0, y = 0, rotation = 0, scaleX = 1, scaleY = 1) {\r\n        this.local = new Matrix2D();\r\n        this.world = new Matrix2D();\r\n        this._position = new Vec2(x, y);\r\n        this._scale = new Vec2(scaleX, scaleY);\r\n        this._skew = new Vec2(0, 0);\r\n        this._origin = new Vec2(0, 0);\r\n        this._rotation = rotation;\r\n        this.dirty = true;\r\n    }\r\n    update() {\r\n        if (!this.dirty) {\r\n            return false;\r\n        }\r\n        const { _a, _b, _c, _d, _position } = this;\r\n        // tx = this._position.x - ((this._origin.x * a) + (this._origin.y * c));\r\n        // ty = this._position.y - ((this._origin.x * b) + (this._origin.y * d));\r\n        this.local.set(_a, _b, _c, _d, _position.x, _position.y);\r\n        this.dirty = false;\r\n        return true;\r\n    }\r\n    setPosition(x, y) {\r\n        this._position.set(x, y);\r\n        this.dirty = true;\r\n        return this;\r\n    }\r\n    setScale(scaleX, scaleY = scaleX) {\r\n        this._scale.set(scaleX, scaleY);\r\n        this.dirty = true;\r\n        this.updateCache();\r\n        return this;\r\n    }\r\n    setSkew(skewX, skewY) {\r\n        this._skew.set(skewX, skewY);\r\n        this.dirty = true;\r\n        this.updateCache();\r\n        return this;\r\n    }\r\n    setOrigin(originX, originY = originX) {\r\n        this._origin.set(originX, originY);\r\n        this.dirty = true;\r\n        return this;\r\n    }\r\n    setRotation(rotation) {\r\n        this.rotation = rotation;\r\n        return this;\r\n    }\r\n    updateCache() {\r\n        const { _rotation, _skew, _scale } = this;\r\n        this._a = Math.cos(_rotation + _skew.y) * _scale.x;\r\n        this._b = Math.sin(_rotation + _skew.y) * _scale.x;\r\n        this._c = -Math.sin(_rotation - _skew.x) * _scale.y;\r\n        this._d = Math.cos(_rotation - _skew.x) * _scale.y;\r\n    }\r\n    set x(value) {\r\n        this._position.x = value;\r\n        this.dirty = true;\r\n    }\r\n    get x() {\r\n        return this._position.x;\r\n    }\r\n    set y(value) {\r\n        this._position.y = value;\r\n        this.dirty = true;\r\n    }\r\n    get y() {\r\n        return this._position.y;\r\n    }\r\n    set rotation(value) {\r\n        this._rotation = value;\r\n        this.dirty = true;\r\n        this.updateCache();\r\n    }\r\n    get rotation() {\r\n        return this._rotation;\r\n    }\r\n    set scaleX(value) {\r\n        this._scale.x = value;\r\n        this.dirty = true;\r\n        this.updateCache();\r\n    }\r\n    get scaleX() {\r\n        return this._scale.x;\r\n    }\r\n    set scaleY(value) {\r\n        this._scale.y = value;\r\n        this.dirty = true;\r\n        this.updateCache();\r\n    }\r\n    get scaleY() {\r\n        return this._scale.y;\r\n    }\r\n    set originX(value) {\r\n        this._origin.x = value;\r\n        this.dirty = true;\r\n    }\r\n    get originX() {\r\n        return this._origin.x;\r\n    }\r\n    set originY(value) {\r\n        this._origin.y = value;\r\n        this.dirty = true;\r\n    }\r\n    get originY() {\r\n        return this._origin.y;\r\n    }\r\n    set skewX(value) {\r\n        this._skew.x = value;\r\n        this.dirty = true;\r\n        this.updateCache();\r\n    }\r\n    get skewX() {\r\n        return this._skew.x;\r\n    }\r\n    set skewY(value) {\r\n        this._skew.y = value;\r\n        this.dirty = true;\r\n        this.updateCache();\r\n    }\r\n    get skewY() {\r\n        return this._skew.y;\r\n    }\r\n}\r\n//# sourceMappingURL=Transform.js.map","import Texture from './Texture';\nimport { Transform } from '@phaserjs/math-transform';\nimport { Vec2 } from '@phaserjs/math-vec2';\n\nexport default class Sprite extends Transform\n{\n    readonly topLeft: Vec2;\n    readonly topRight: Vec2;\n    readonly bottomLeft: Vec2;\n    readonly bottomRight: Vec2;\n\n    readonly rgba;\n\n    visible: boolean = true;\n    texture: Texture = null;\n\n    uv = {\n        topLeft: { x: 0, y: 0 },\n        topRight: { x: 1, y: 0 },\n        bottomLeft: { x: 0, y: 1 },\n        bottomRight: { x: 1, y: 1 }\n    };\n\n    private _size: Vec2;\n\n    constructor (x: number, y: number, width: number, height: number, r: number = 1, g: number = 1, b: number = 1, a: number = 1)\n    {\n        super(x, y);\n\n        this._size = new Vec2(width, height);\n\n        this.topLeft = new Vec2();\n        this.topRight = new Vec2();\n        this.bottomLeft = new Vec2();\n        this.bottomRight = new Vec2();\n\n        this.rgba = { r, g, b, a };\n\n        this.updateVertices();\n    }\n\n    setTexture (texture: Texture)\n    {\n        this.texture = texture;\n\n        this._size.set(texture.width, texture.height);\n\n        this.dirty = true;\n\n        this.updateVertices();\n\n        return this;\n    }\n\n    updateVertices (): boolean\n    {\n        if (!this.dirty)\n        {\n            return false;\n        }\n\n        this.update();\n\n        const w: number = this._size.x;\n        const h: number = this._size.y;\n\n        const x0: number = -(this._origin.x * w);\n        const x1: number = x0 + w;\n        const y0: number = -(this._origin.y * h);\n        const y1: number = y0 + h;\n\n        const { a, b, c, d, tx, ty } = this.local;\n\n        //  Cache the calculations to avoid 8 getX/Y function calls:\n\n        const x0a: number = x0 * a;\n        const x0b: number = x0 * b;\n        const y0c: number = y0 * c;\n        const y0d: number = y0 * d;\n\n        const x1a: number = x1 * a;\n        const x1b: number = x1 * b;\n        const y1c: number = y1 * c;\n        const y1d: number = y1 * d;\n\n        this.topLeft.set(x0a + y0c + tx, x0b + y0d + ty);\n        this.topRight.set(x1a + y0c + tx, x1b + y0d + ty);\n        this.bottomLeft.set(x0a + y1c + tx, x0b + y1d + ty);\n        this.bottomRight.set(x1a + y1c + tx, x1b + y1d + ty);\n\n        return true;\n    }\n\n    batch (dataTA: Float32Array, offset: number)\n    {\n        dataTA[offset + 0] = this.topLeft.x;\n        dataTA[offset + 1] = this.topLeft.y;\n        dataTA[offset + 2] = this.rgba.r;\n        dataTA[offset + 3] = this.rgba.g;\n        dataTA[offset + 4] = this.rgba.b;\n        dataTA[offset + 5] = this.rgba.a;\n        dataTA[offset + 6] = this.uv.topLeft.x;\n        dataTA[offset + 7] = this.uv.topLeft.y;\n\n        dataTA[offset + 8] = this.bottomLeft.x;\n        dataTA[offset + 9] = this.bottomLeft.y;\n        dataTA[offset + 10] = this.rgba.r;\n        dataTA[offset + 11] = this.rgba.g;\n        dataTA[offset + 12] = this.rgba.b;\n        dataTA[offset + 13] = this.rgba.a;\n        dataTA[offset + 14] = this.uv.bottomLeft.x;\n        dataTA[offset + 15] = this.uv.bottomLeft.y;\n\n        dataTA[offset + 16] = this.bottomRight.x;\n        dataTA[offset + 17] = this.bottomRight.y;\n        dataTA[offset + 18] = this.rgba.r;\n        dataTA[offset + 19] = this.rgba.g;\n        dataTA[offset + 20] = this.rgba.b;\n        dataTA[offset + 21] = this.rgba.a;\n        dataTA[offset + 22] = this.uv.bottomRight.x;\n        dataTA[offset + 23] = this.uv.bottomRight.y;\n\n        dataTA[offset + 24] = this.topRight.x;\n        dataTA[offset + 25] = this.topRight.y;\n        dataTA[offset + 26] = this.rgba.r;\n        dataTA[offset + 27] = this.rgba.g;\n        dataTA[offset + 28] = this.rgba.b;\n        dataTA[offset + 29] = this.rgba.a;\n        dataTA[offset + 30] = this.uv.topRight.x;\n        dataTA[offset + 31] = this.uv.topRight.y;\n    }\n\n    batchMultiTexture (dataTA: Float32Array, offset: number)\n    {\n        const textureIndex = this.texture.glIndex;\n        const { r, g, b, a } = this.rgba;\n\n        dataTA[offset + 0] = this.topLeft.x;\n        dataTA[offset + 1] = this.topLeft.y;\n        dataTA[offset + 2] = r;\n        dataTA[offset + 3] = g;\n        dataTA[offset + 4] = b;\n        dataTA[offset + 5] = a;\n        dataTA[offset + 6] = this.uv.topLeft.x;\n        dataTA[offset + 7] = this.uv.topLeft.y;\n        dataTA[offset + 8] = textureIndex;\n\n        dataTA[offset + 9] = this.bottomLeft.x;\n        dataTA[offset + 10] = this.bottomLeft.y;\n        dataTA[offset + 11] = r;\n        dataTA[offset + 12] = g;\n        dataTA[offset + 13] = b;\n        dataTA[offset + 14] = a;\n        dataTA[offset + 15] = this.uv.bottomLeft.x;\n        dataTA[offset + 16] = this.uv.bottomLeft.y;\n        dataTA[offset + 17] = textureIndex;\n\n        dataTA[offset + 18] = this.bottomRight.x;\n        dataTA[offset + 19] = this.bottomRight.y;\n        dataTA[offset + 20] = r;\n        dataTA[offset + 21] = g;\n        dataTA[offset + 22] = b;\n        dataTA[offset + 23] = a;\n        dataTA[offset + 24] = this.uv.bottomRight.x;\n        dataTA[offset + 25] = this.uv.bottomRight.y;\n        dataTA[offset + 26] = textureIndex;\n\n        dataTA[offset + 27] = this.topRight.x;\n        dataTA[offset + 28] = this.topRight.y;\n        dataTA[offset + 29] = r;\n        dataTA[offset + 30] = g;\n        dataTA[offset + 31] = b;\n        dataTA[offset + 32] = a;\n        dataTA[offset + 33] = this.uv.topRight.x;\n        dataTA[offset + 34] = this.uv.topRight.y;\n        dataTA[offset + 35] = textureIndex;\n    }\n\n}","//  Base Texture\n\nexport default class Texture\n{\n    key: string;\n\n    width: number;\n    height: number;\n\n    image: HTMLImageElement;\n\n    gl: WebGLRenderingContext;\n    glTexture: WebGLTexture;\n    glIndex: number = 0;\n\n    _onLoadCallback: Function;\n\n    constructor (key: string, gl: WebGLRenderingContext, glIndex: number = 0)\n    {\n        this.key = key;\n\n        this.gl = gl;\n        this.glIndex = glIndex;\n    }\n\n    onLoad ()\n    {\n        // console.log(this.key, 'loaded');\n\n        const gl = this.gl;\n\n        this.glTexture = this.gl.createTexture();\n\n        gl.activeTexture(gl.TEXTURE0 + this.glIndex);\n\n        gl.bindTexture(gl.TEXTURE_2D, this.glTexture);\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        this.width = this.image.width;\n        this.height = this.image.height;\n\n        //  POT only\n        // gl.generateMipmap(gl.TEXTURE_2D);\n\n        this.image.onload = null;\n\n        if (this._onLoadCallback)\n        {\n            this._onLoadCallback(this);\n        }\n    }\n\n    load (url: string, callback?: Function)\n    {\n        // console.log(this.key, 'loading');\n\n        this.image = new Image();\n\n        this.image.onload = () => this.onLoad();\n\n        this.image.src = url;\n\n        if (callback)\n        {\n            this._onLoadCallback = callback;\n        }\n\n        // Image is immediately-available / cached\n        if (this.image.complete && this.image.width && this.image.height)\n        {\n            this.onLoad();\n        }\n    }\n}\n","export default {\n\n    fragmentShader: `\nprecision mediump float;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\n\nuniform sampler2D uTexture[%count%];\n\nvoid main (void)\n{\n    vec4 color;\n\n    %forloop%\n\n    gl_FragColor = color * vColor;\n}`,\n    \n    vertexShader: `\nattribute vec4 aColor;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute float aTextureId;\n\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\n\nvoid main (void)\n{\n    vColor = aColor;\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n\n    gl_Position = uProjectionMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}`\n\n}\n","export class Matrix4 {\r\n    /**\r\n     * Creates an instance of a Matrix4.\r\n     *\r\n     * Format: column-major, when typed out it looks like row-major.\r\n     *\r\n     * @param {number} [m00=1] - Component in column 0, row 0 position (index 0)\r\n     * @param {number} [m01=0] - Component in column 0, row 1 position (index 1)\r\n     * @param {number} [m02=0] - Component in column 0, row 2 position (index 2)\r\n     * @param {number} [m03=0] - Component in column 0, row 3 position (index 3)\r\n     * @param {number} [m10=0] - Component in column 1, row 0 position (index 4)\r\n     * @param {number} [m11=1] - Component in column 1, row 1 position (index 5)\r\n     * @param {number} [m12=0] - Component in column 1, row 2 position (index 6)\r\n     * @param {number} [m13=0] - Component in column 1, row 3 position (index 7)\r\n     * @param {number} [m20=0] - Component in column 2, row 0 position (index 8)\r\n     * @param {number} [m21=0] - Component in column 2, row 1 position (index 9)\r\n     * @param {number} [m22=1] - Component in column 2, row 2 position (index 10)\r\n     * @param {number} [m23=0] - Component in column 2, row 3 position (index 11)\r\n     * @param {number} [m30=0] - Component in column 3, row 0 position (index 12)\r\n     * @param {number} [m31=0] - Component in column 3, row 1 position (index 13)\r\n     * @param {number} [m32=0] - Component in column 3, row 2 position (index 14)\r\n     * @param {number} [m33=1] - Component in column 3, row 3 position (index 15)\r\n     * @memberof Matrix4\r\n     */\r\n    constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {\r\n        this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n    }\r\n    /**\r\n     * Sets the components of this Matrix4.\r\n     *\r\n     * If no parameters are given it resets this Matrix4 to an identity matrix.\r\n     *\r\n     * @param {number} [m00=1] - Component in column 0, row 0 position (index 0)\r\n     * @param {number} [m01=0] - Component in column 0, row 1 position (index 1)\r\n     * @param {number} [m02=0] - Component in column 0, row 2 position (index 2)\r\n     * @param {number} [m03=0] - Component in column 0, row 3 position (index 3)\r\n     * @param {number} [m10=0] - Component in column 1, row 0 position (index 4)\r\n     * @param {number} [m11=1] - Component in column 1, row 1 position (index 5)\r\n     * @param {number} [m12=0] - Component in column 1, row 2 position (index 6)\r\n     * @param {number} [m13=0] - Component in column 1, row 3 position (index 7)\r\n     * @param {number} [m20=0] - Component in column 2, row 0 position (index 8)\r\n     * @param {number} [m21=0] - Component in column 2, row 1 position (index 9)\r\n     * @param {number} [m22=1] - Component in column 2, row 2 position (index 10)\r\n     * @param {number} [m23=0] - Component in column 2, row 3 position (index 11)\r\n     * @param {number} [m30=0] - Component in column 3, row 0 position (index 12)\r\n     * @param {number} [m31=0] - Component in column 3, row 1 position (index 13)\r\n     * @param {number} [m32=0] - Component in column 3, row 2 position (index 14)\r\n     * @param {number} [m33=1] - Component in column 3, row 3 position (index 15)\r\n     * @returns {Matrix4}\r\n     * @memberof Matrix4\r\n     */\r\n    set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {\r\n        this.m00 = m00;\r\n        this.m01 = m01;\r\n        this.m02 = m02;\r\n        this.m03 = m03;\r\n        this.m10 = m10;\r\n        this.m11 = m11;\r\n        this.m12 = m12;\r\n        this.m13 = m13;\r\n        this.m20 = m20;\r\n        this.m21 = m21;\r\n        this.m22 = m22;\r\n        this.m23 = m23;\r\n        this.m30 = m30;\r\n        this.m31 = m31;\r\n        this.m32 = m32;\r\n        this.m33 = m33;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets all components of this Matrix4 to zero.\r\n     *\r\n     * @returns {Matrix4}\r\n     * @memberof Matrix4\r\n     */\r\n    zero() {\r\n        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    }\r\n    /**\r\n     * Resets this Matrix4 to an identity matrix.\r\n     *\r\n     * @returns {Matrix4}\r\n     * @memberof Matrix4\r\n     */\r\n    identity() {\r\n        return this.set();\r\n    }\r\n    /**\r\n     * Returns a new array containg the Matrix4 component values in column-major format.\r\n     *\r\n     * @returns {number[]}\r\n     * @memberof Matrix4\r\n     */\r\n    getArray() {\r\n        return [this.m00, this.m01, this.m02, this.m03, this.m10, this.m11, this.m12, this.m13, this.m20, this.m21, this.m22, this.m23, this.m30, this.m31, this.m32, this.m33];\r\n    }\r\n    /**\r\n     * Sets the values of this Matrix4 based on the given array, or array-like object, such as a Float32.\r\n     *\r\n     * The source must have 16 elements, starting from index 0 through to index 15.\r\n     *\r\n     * @param {number[]} src - The source array to copy the values from.\r\n     * @returns {Matrix4}\r\n     * @memberof Matrix4\r\n     */\r\n    fromArray(src) {\r\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5], src[6], src[7], src[8], src[9], src[10], src[11], src[12], src[13], src[14], src[15]);\r\n    }\r\n    [Symbol.iterator]() {\r\n        const data = this.getArray();\r\n        return data[Symbol.iterator]();\r\n    }\r\n}\r\n//# sourceMappingURL=Matrix4.js.map","import { Matrix4 } from '@phaserjs/math-matrix4';\r\nexport function Ortho(left, right, bottom, top, near, far) {\r\n    const lr = 1 / (left - right);\r\n    const bt = 1 / (bottom - top);\r\n    const nf = 1 / (near - far);\r\n    const m00 = -2 * lr;\r\n    const m11 = -2 * bt;\r\n    const m22 = 2 * nf;\r\n    const m30 = (left + right) * lr;\r\n    const m31 = (top + bottom) * bt;\r\n    const m32 = (far + near) * nf;\r\n    return new Matrix4(m00, 0, 0, 0, 0, m11, 0, 0, 0, 0, m22, 0, m30, m31, m32, 1);\r\n}\r\n//# sourceMappingURL=Ortho.js.map","import Sprite from './TexturedSprite';\nimport Texture from './Texture';\nimport MultiTexturedQuadShader from './MultiTexturedQuadShader';\nimport { Ortho } from '@phaserjs/math-matrix4-funcs';\n\n//  Multi-texture Test\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\n//  From Pixi v5:\nfunction checkMaxIfStatementsInShader (maxIfs: number, gl: WebGLRenderingContext): number\n{\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true)\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n\nfunction generateIfTestSrc (maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nfunction generateSampleSrc (maxTextures: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src += '\\n    else ';\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src += `if (vTextureId < ${i}.5)`;\n        }\n\n        src += '\\n    {';\n        src += `\\n        color = texture2D(uTexture[${i}], vTextureCoord);`;\n        src += '\\n    }';\n    }\n\n    return src;\n}\n\nexport default function ()\n{\n    const resolution = { x: 800, y: 600 };\n\n    const canvas = document.getElementById('game') as HTMLCanvasElement;\n\n    canvas.width = resolution.x;\n    canvas.height = resolution.y;\n\n    const contextOptions: WebGLContextAttributes = {\n        alpha: false,\n        antialias: true,\n        premultipliedAlpha: false,\n        stencil: false,\n        preserveDrawingBuffer: false\n    };\n\n    const gl: WebGLRenderingContext = canvas.getContext('webgl', contextOptions);\n    \n    //  Multi-texture support\n    let maxTextures = checkMaxIfStatementsInShader(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), gl);\n\n    console.log('maxTextures', maxTextures, 'out of', gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\n\n    let fragmentShaderSource = MultiTexturedQuadShader.fragmentShader;\n\n    fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\n    fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    // console.log(fragmentShaderSource);\n\n    //  Create the shaders\n\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    \n    gl.shaderSource(fragmentShader, fragmentShaderSource);\n    gl.compileShader(fragmentShader);\n    \n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    \n    gl.shaderSource(vertexShader, MultiTexturedQuadShader.vertexShader);\n    gl.compileShader(vertexShader);\n    \n    const program = gl.createProgram();\n    \n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    gl.useProgram(program);\n    \n    const vertexPositionAttrib = gl.getAttribLocation(program, 'aVertexPosition');\n    const vertexColorAttrib = gl.getAttribLocation(program, 'aColor');\n    const vertexTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');\n    const vertexTextureIndex = gl.getAttribLocation(program, 'aTextureId');\n\n    const uProjectionMatrix = gl.getUniformLocation(program, 'uProjectionMatrix');\n    const uTextureLocation = gl.getUniformLocation(program, 'uTexture');\n    // const uTextureLocation0 = gl.getUniformLocation(program, 'uTexture[0]');\n    // const uTextureLocation1 = gl.getUniformLocation(program, 'uTexture[1]');\n    // const uTextureLocation2 = gl.getUniformLocation(program, 'uTexture[2]');\n    // const uTextureLocation3 = gl.getUniformLocation(program, 'uTexture[3]');\n\n    // console.log(uTextureLocation);\n    // console.log(uTextureLocation0, uTextureLocation1, uTextureLocation2, uTextureLocation3);\n\n    gl.enableVertexAttribArray(vertexPositionAttrib);\n    gl.enableVertexAttribArray(vertexColorAttrib);\n    gl.enableVertexAttribArray(vertexTextureCoord);\n    gl.enableVertexAttribArray(vertexTextureIndex);\n\n    const maxSpritesPerBatch = 500;\n\n    //  The size in bytes per element in the dataArray\n    const size = 4;\n\n    //  Size in bytes of a single vertex\n\n    /**\n     * Each vertex contains:\n     * \n     *  position (x,y - 2 floats)\n     *  color (r,g,b,a - 4 floats)\n     *  texture coord (x,y - 2 floats)\n     *  texture index (float)\n     */\n    const singleVertexSize = 36;\n\n    //  Size of a single sprite in array elements\n    //  Each vertex = 9 elements, so 9 * 4\n    const singleSpriteSize = 36;\n\n    //  Size in bytes of a single sprite\n    const singleSpriteByteSize = singleVertexSize * size;\n\n    //  Size in bytes of a single vertex indicies\n    const singleIndexByteSize = 4;\n\n    //  Size in bytes of a single vertex indicies\n    const singleSpriteIndexSize = 6;\n\n    //  The size of our ArrayBuffer\n    const bufferByteSize = maxSpritesPerBatch * singleSpriteByteSize;\n\n    //  Our ArrayBuffer + View\n    const dataTA = new Float32Array(bufferByteSize);\n\n    let ibo = [];\n\n    //  Seed the index buffer\n    for (let i = 0; i < (maxSpritesPerBatch * singleIndexByteSize); i += singleIndexByteSize)\n    {\n        ibo.push(i + 0, i + 1, i + 2, i + 2, i + 3, i + 0);\n    }\n\n    //  Our buffers\n\n    const vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, dataTA, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    const indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(ibo), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    //  This matrix will convert from pixels to clip space - it only needs to be set when the canvas is sized\n    const projectionMatrix = Ortho(0, resolution.x, resolution.y, 0, -1000, 1000);\n    \n    const stride = 36;\n\n    //  Textures ...\n    const textures: Texture[] = [];\n\n    function loadTextures (urls: string[])\n    {\n        let texturesLeft = urls.length;\n\n        const onLoadCallback = () => {\n\n            texturesLeft--;\n\n            if (texturesLeft === 0)\n            {\n                // console.log('load finished');\n                create();\n            }\n\n        }\n\n        urls.forEach((url, index) => {\n\n            let texture = new Texture(url, gl, textures.length);\n\n            texture.load('../assets/' + url, onLoadCallback);\n\n            textures.push(texture);\n\n        });\n    }\n\n    loadTextures([\n        'car.png',\n        'carrot.png',\n        'clown.png',\n        'skull.png'\n    ]);\n\n    //  Set the texture index? Or round-robin it?\n\n    const sprites: Sprite[] = [];\n\n    function create ()\n    {\n        //  Some textured sprites\n        //  The batch size in this test is 500, so we'll create 500 of each texture\n\n        console.log(textures);\n\n        let textureIndex = 0;\n\n        for (let i = 0; i < 500 * 4; i++)\n        {\n            let x = Math.floor(Math.random() * resolution.x);\n            let y = Math.floor(Math.random() * resolution.y);\n\n            if (i > 0 && i % 500 === 0)\n            {\n                textureIndex++;\n            }\n\n            let t = textures[textureIndex];\n\n            let sprite = new Sprite(x, y, t.width, t.height);\n\n            sprite.setTexture(t);\n\n            sprites.push(sprite);\n        }\n\n        render();\n    }\n\n    function flush (count: number)\n    {\n        /*\n        const offset = count * singleSpriteByteSize;\n\n        if (offset === bufferByteSize)\n        {\n            gl.bufferData(gl.ARRAY_BUFFER, dataTA, gl.DYNAMIC_DRAW);\n        }\n        else\n        {\n            let view = dataTA.subarray(0, offset);\n\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\n        }\n\n        gl.drawElements(gl.TRIANGLES, count * singleSpriteIndexSize, gl.UNSIGNED_SHORT, 0);\n        */\n\n        gl.bufferData(gl.ARRAY_BUFFER, dataTA, gl.DYNAMIC_DRAW);\n        gl.drawElements(gl.TRIANGLES, ibo.length, gl.UNSIGNED_SHORT, 0);\n    }\n\n    function render ()\n    {\n        const renderList = sprites.map((sprite) => {\n\n            if (sprite.visible)\n            {\n                sprite.updateVertices();\n\n                return sprite;\n            }\n\n        });\n\n        gl.clearColor(0, 0, 0, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n        gl.viewport(0, 0, canvas.width, canvas.height);\n\n        gl.activeTexture(gl.TEXTURE0);\n\n        gl.uniformMatrix4fv(uProjectionMatrix, false, projectionMatrix);\n\n        gl.uniform1iv(uTextureLocation, [ 0, 1, 2, 3 ]);\n        // gl.uniform1i(uTextureLocation0, 0);\n        // gl.uniform1i(uTextureLocation1, 1);\n        // gl.uniform1i(uTextureLocation2, 2);\n        // gl.uniform1i(uTextureLocation3, 3);\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\n        /**\n         * Each vertex contains:\n         * \n         *  position (x,y - 2 floats)\n         *  color (r,g,b,a - 4 floats)\n         *  texture coord (x,y - 2 floats)\n         *  texture index (float)\n         * \n         * 9 floats = 9 * 4 bytes = 36 bytes per vertex. This is our stride.\n         * \n         * The offset is how much data should be skipped at the start of each chunk.\n         * \n         * In our index, the color data is right after the position data.\n         * Position is 2 floats, so the offset for the color is 2 * 4 bytes = 8 bytes.\n         * Color is 4 floats, so the offset for the texture coord is 4 * 4 bytes = 16 bytes, plus the 8 from the position.\n         * Texture Coord is 2 floats, so the offset for Texture Index is 2 * 4 bytes = 8 bytes, plus the 16 from color + 8 from position\n         */\n\n        gl.vertexAttribPointer(vertexPositionAttrib, 2, gl.FLOAT, false, stride, 0);\n        gl.vertexAttribPointer(vertexColorAttrib, 4, gl.FLOAT, false, stride, 8);\n        gl.vertexAttribPointer(vertexTextureCoord, 2, gl.FLOAT, false, stride, 16 + 8);\n        gl.vertexAttribPointer(vertexTextureIndex, 1, gl.FLOAT, false, stride, 16 + 8 + 8);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, textures[0].glTexture);\n\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, textures[1].glTexture);\n\n        gl.activeTexture(gl.TEXTURE2);\n        gl.bindTexture(gl.TEXTURE_2D, textures[2].glTexture);\n\n        gl.activeTexture(gl.TEXTURE3);\n        gl.bindTexture(gl.TEXTURE_2D, textures[3].glTexture);\n\n        let prevTexture = renderList[0].texture;\n        let size = 0;\n\n        for (let i = 0; i < renderList.length; i++)\n        {\n            let sprite = renderList[i];\n\n            // if (sprite.texture !== prevTexture)\n            // {\n            //     gl.activeTexture(gl['TEXTURE' + sprite.texture.glIndex]);\n            //     gl.bindTexture(gl.TEXTURE_2D, sprite.texture.glTexture);\n\n                //  We've got a new texture, so lets flush\n                // console.log('Texture', prevTexture.key, 'for', size, 'sprites');\n\n                // gl.bindTexture(gl.TEXTURE_2D, prevTexture.glTexture);\n\n                // flush(size);\n\n                // start = i;\n                // size = 0;\n                // prevTexture = sprite.texture;\n            // }\n\n            //  The offset here is the offset into the array, NOT a byte size!\n            sprite.batchMultiTexture(dataTA, size * singleSpriteSize);\n\n            //  if size = batch limit, flush here\n            /*\n            if (size === maxSpritesPerBatch)\n            {\n                gl.bindTexture(gl.TEXTURE_2D, prevTexture.glTexture);\n\n                flush(size);\n    \n                // start = i;\n                size = 0;\n                prevTexture = sprite.texture;\n            }\n            else\n            {\n                size++;\n            }\n            */\n\n            size++;\n        }\n\n        // if (size > 0)\n        // {\n            // console.log('Final Texture', prevTexture.key, 'for', size, 'sprites');\n\n            // gl.bindTexture(gl.TEXTURE_2D, prevTexture.glTexture);\n\n            flush(size);\n        // }\n\n        requestAnimationFrame(render);\n    }\n}\n","import part01 from './part01';\nimport part02 from './part02';\nimport part03 from './part03';\nimport part04 from './part04';\nimport part05 from './part05';\nimport part06 from './part06';\nimport part07 from './part07';\nimport part08 from './part08';\nimport part09 from './part09';\nimport part10 from './part10';\nimport part11 from './part11';\nimport part12 from './part12';\nimport part13 from './part13';\nimport part14 from './part14';\nimport part15 from './part15';\nimport part16 from './part16';\nimport part17 from './part17';\nimport part18 from './part18';\nimport part19 from './part19';\n\n// part18();\npart19();\n\n//  Next steps:\n\n//  * Multi-texture support\n//  * Texture Frames (UV) support\n//  * Camera matrix, added to the shader (projection * camera * vertex pos), so we can move the camera around, rotate it, etc.\n//  X Sub-data buffer with batch flush, like current renderer handles it\n//  * Transform stack test (Quad with children, children of children, etc)\n//  * Instead of a Quad class, try a class that can have any number of vertices in it (ala Rope), or any vertex moved\n//  * Encode color as a single float, rather than a vec4\n\n//  X Add a basic display list, so the buffer is cleared each frame and populated via the list\n//  X Try adding all quads to a single huge buffer on creation (remove on destruction), then in the render loop\n//    copy chunks from this buffer to the gl buffer - depends how fast typed array copies are vs. pushing elements by index\n"],"names":["Sprite","Transform","constructor","x","y","width","height","r","g","b","a","topLeft","topRight","bottomLeft","bottomRight","_size","Vec2","rgba","updateVertices","setTexture","texture","set","dirty","update","w","h","x0","_origin","x1","y0","y1","c","d","tx","ty","local","x0a","x0b","y0c","y0d","x1a","x1b","y1c","y1d","batch","dataTA","offset","uv","batchMultiTexture","textureIndex","glIndex","Texture","key","gl","onLoad","glTexture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","image","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","onload","_onLoadCallback","load","url","callback","Image","src","complete","fragmentShader","vertexShader","fragTemplate","join","checkMaxIfStatementsInShader","maxIfs","shader","createShader","FRAGMENT_SHADER","fragmentSrc","replace","generateIfTestSrc","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","i","generateSampleSrc","maxTextures","resolution","canvas","document","getElementById","contextOptions","alpha","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","getContext","getParameter","MAX_TEXTURE_IMAGE_UNITS","console","log","fragmentShaderSource","MultiTexturedQuadShader","VERTEX_SHADER","program","createProgram","attachShader","linkProgram","useProgram","vertexPositionAttrib","getAttribLocation","vertexColorAttrib","vertexTextureCoord","vertexTextureIndex","uProjectionMatrix","getUniformLocation","uTextureLocation","enableVertexAttribArray","maxSpritesPerBatch","size","singleVertexSize","singleSpriteSize","singleSpriteByteSize","singleIndexByteSize","bufferByteSize","Float32Array","ibo","push","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","STATIC_DRAW","projectionMatrix","Ortho","stride","textures","loadTextures","urls","texturesLeft","length","onLoadCallback","create","forEach","index","sprites","Math","floor","random","t","sprite","render","flush","count","drawElements","TRIANGLES","UNSIGNED_SHORT","renderList","map","visible","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","viewport","uniformMatrix4fv","uniform1iv","vertexAttribPointer","FLOAT","TEXTURE1","TEXTURE2","TEXTURE3","prevTexture","requestAnimationFrame","part19"],"mappings":"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"}