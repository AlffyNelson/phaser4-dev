!function(){"use strict";class t{constructor(t=1,i=0,e=0,n=1,o=0,s=0){this.set(t,i,e,n,o,s)}set(t=1,i=0,e=0,n=1,o=0,s=0){return this.a=t,this.b=i,this.c=e,this.d=n,this.tx=o,this.ty=s,this}identity(){return this.set()}toArray(){return[this.a,this.b,this.c,this.d,this.tx,this.ty]}fromArray(t){return this.set(t[0],t[1],t[2],t[3],t[4],t[5])}[Symbol.iterator](){return this.toArray()[Symbol.iterator]()}}class i{constructor(t=0,i=0){this.set(t,i)}set(t=0,i=0){return this.x=t,this.y=i,this}zero(){return this.set()}getArray(){return[this.x,this.y]}fromArray(t){return this.set(t[0],t[1])}[Symbol.iterator](){return this.getArray()[Symbol.iterator]()}}!function(){class e extends class{constructor(e=0,n=0,o=0,s=1,r=1){this.local=new t,this.world=new t,this._position=new i(e,n),this._scale=new i(s,r),this._skew=new i(0,0),this._origin=new i(0,0),this._rotation=o,this.dirty=!0}update(){if(!this.dirty)return!1;const{_a:t,_b:i,_c:e,_d:n,_position:o}=this;return this.local.set(t,i,e,n,o.x,o.y),this.dirty=!1,!0}setPosition(t,i){return this._position.set(t,i),this.dirty=!0,this}setScale(t,i=t){return this._scale.set(t,i),this.dirty=!0,this.updateCache(),this}setSkew(t,i){return this._skew.set(t,i),this.dirty=!0,this.updateCache(),this}setOrigin(t,i=t){return this._origin.set(t,i),this.dirty=!0,this}setRotation(t){return this.rotation=t,this}updateCache(){const{_rotation:t,_skew:i,_scale:e}=this;this._a=Math.cos(t+i.y)*e.x,this._b=Math.sin(t+i.y)*e.x,this._c=-Math.sin(t-i.x)*e.y,this._d=Math.cos(t-i.x)*e.y}set x(t){this._position.x=t,this.dirty=!0}get x(){return this._position.x}set y(t){this._position.y=t,this.dirty=!0}get y(){return this._position.y}set rotation(t){this._rotation=t,this.dirty=!0,this.updateCache()}get rotation(){return this._rotation}set scaleX(t){this._scale.x=t,this.dirty=!0,this.updateCache()}get scaleX(){return this._scale.x}set scaleY(t){this._scale.y=t,this.dirty=!0,this.updateCache()}get scaleY(){return this._scale.y}set originX(t){this._origin.x=t,this.dirty=!0}get originX(){return this._origin.x}set originY(t){this._origin.y=t,this.dirty=!0}get originY(){return this._origin.y}set skewX(t){this._skew.x=t,this.dirty=!0,this.updateCache()}get skewX(){return this._skew.x}set skewY(t){this._skew.y=t,this.dirty=!0,this.updateCache()}get skewY(){return this._skew.y}}{constructor(t,e,n,o,s,r,a,h){super(t,e),this._size=new i(n,o),this.topLeft=new i,this.topRight=new i,this.bottomLeft=new i,this.bottomRight=new i,this.rgba={r:s,g:r,b:a,a:h},this.updateVertices()}updateVertices(){if(!this.dirty)return!1;this.update();const t=this._size.x,i=this._size.y,e=-this._origin.x*t,n=e+t,o=-this._origin.y*i,s=o+i,{a:r,b:a,c:h,d:c,tx:l,ty:g}=this.local,d=e*r,u=e*a,_=o*h,y=o*c,b=n*r,f=n*a,m=s*h,p=s*c;return this.topLeft.set(d+_+l,u+y+g),this.topRight.set(b+_+l,f+y+g),this.bottomLeft.set(d+m+l,u+p+g),this.bottomRight.set(b+m+l,f+p+g),!0}}const n=document.getElementById("game");n.width=800,n.height=600;const o=n.getContext("webgl"),s=o.createShader(o.FRAGMENT_SHADER);o.shaderSource(s,"\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    uniform float time;\n    uniform vec2 resolution;\n    \n    const int TV_MODE_SCANLINES = 1;\n    const int TV_MODE_SLANT = 2;\n    \n    const float rgbPixZoom = 2.0;\n    const float scanlineStep = 10.0;\n    const float scanlineIntensity = 0.7;\n    \n    const int tvMode = TV_MODE_SLANT;\n    //const int tvMode = TV_MODE_SCANLINES;\n    \n    void main( void ) {\n      vec2 spd = vec2(\n        2.0 * sin( ( (4.1*sin(time/(6.5*time))-10.2) + (5.4*sin(time/12.0)+10.0) + (4.2*sin(time/12.10)+0.00) + (1.00*sin(time*(0.00125*sin(time/2.3)+0.49))) ) / 2.0),\n        2.0 * cos( ( (4.0*cos(time/(6.0*time))-12.2) + (5.5*cos(time/12.0)+10.0) + (8.0*cos(time/13.23)+0.00) + (1.00*sin(time*(0.00125*sin(time/3.1)+0.50))) ) / 2.0)\n      );\n      \n      vec2 pos = vec2(\n        (gl_FragCoord.x - resolution.x/2.0) * spd.x / resolution.x / (0.25*sin(time/1.3)+1.0) / 0.50,\n        (gl_FragCoord.y - resolution.y/2.0) * spd.y / resolution.y / (0.25*cos(time/1.0)+3.0) / 0.50\n      );\n    \n      float diagonalPos = 1.66 * sin(length(vec2(pos.x, pos.y)));\n    \n      vec4 image = vec4(\n        sin(pos.y*(0.80-diagonalPos)*20.0) * cos(spd.y*(0.80-diagonalPos)*20.0) + 1.0,\n        sin(pos.y*(0.90-diagonalPos)*23.0) * cos(spd.y*(0.90-diagonalPos)*23.0) + 1.0,\n        sin(pos.y*(1.00-diagonalPos)*21.0) * cos(spd.y*(1.00-diagonalPos)*21.0) + 1.0,\n        1.0\n      );\n    \n      image *= vec4(\n        sin(pos.x+spd.x+(0.9-diagonalPos)*20.0) * cos(pos.y*spd.y/(0.9-diagonalPos)*20.0),\n        cos(pos.x+spd.x+(0.8-diagonalPos)*21.0) * cos(pos.y*spd.y/(0.8-diagonalPos)*19.0),\n        sin(pos.x+spd.x+(1.0-diagonalPos)*19.0) * sin(pos.y*spd.y/(1.0-diagonalPos)*21.0),\n        1.0\n      );\n      \n      vec4 colorAdjust = vec4(1.66, 1.1, 1.5, 1.0);\n    \n      image = clamp(image*colorAdjust, 0.0, 1.0);\n    \n      float rgbPos; // 0-red, 1-blue, 2-green\n      vec4 rgbFilter;\n      \n      // rotate R, G and B pixels based on scanline\n      if (tvMode == TV_MODE_SLANT) {\n        float rgbShift = floor(mod((resolution.y-gl_FragCoord.y)/rgbPixZoom, 3.0));\n        rgbPos = floor(mod(gl_FragCoord.x/rgbPixZoom+rgbShift, 3.0)); \n        rgbFilter = vec4(\n          float(rgbPos == 0.0),\n          float(rgbPos == 1.0),\n          float(rgbPos == 2.0),\n          1.0\n        );\n      } else if (tvMode == TV_MODE_SCANLINES) {\n        float lineIndex = floor(mod((resolution.y-gl_FragCoord.y)/rgbPixZoom, scanlineStep));\n        bool  isScanline = lineIndex == (scanlineStep-1.0);\n        rgbPos = floor(mod(gl_FragCoord.x/rgbPixZoom, 3.0));\n        rgbFilter = vec4(\n          float(rgbPos == 0.0) * (isScanline ? scanlineIntensity : 1.0),\n          float(rgbPos == 1.0) * (isScanline ? scanlineIntensity : 1.0),\n          float(rgbPos == 2.0) * (isScanline ? scanlineIntensity : 1.0),\n          1.0\n        );\n      } else {\n        rgbFilter = vec4(1.0, 1.0, 1.0, 1.0);\n      }\n      \n      gl_FragColor = image * colorAdjust * rgbFilter;\n    }\n    "),o.compileShader(s);const r=o.createShader(o.VERTEX_SHADER);o.shaderSource(r,"\n    precision mediump float;\n\n    attribute vec4 aColor;\n    attribute vec2 aVertexPosition;\n\n    uniform mat4 uProjectionMatrix;\n    // uniform float uTime;\n\n    varying vec2 fragCoord;\n    varying vec4 vColor;\n    \n    void main (void)\n    {\n        vColor = aColor;\n\n        fragCoord = aVertexPosition;\n        \n        gl_Position = uProjectionMatrix * vec4(aVertexPosition, 0.0, 1.0);\n    }\n    "),o.compileShader(r);const a=o.createProgram();o.attachShader(a,r),o.attachShader(a,s),o.linkProgram(a),o.useProgram(a);const h=o.getUniformLocation(a,"uProjectionMatrix"),c=o.getUniformLocation(a,"time"),l=o.getUniformLocation(a,"resolution"),g=o.getAttribLocation(a,"aVertexPosition"),d=o.getAttribLocation(a,"aColor");o.enableVertexAttribArray(g),o.enableVertexAttribArray(d);const u=800,_=600,y=[];for(let t=0;t<1;t++){let t=new e(0,0,u,_,1,1,1,1);t.updateVertices(),y.push(t)}const b=new Float32Array(96);let f=0,m=[],p=0;y.forEach(t=>{b[f+0]=t.topLeft.x,b[f+1]=t.topLeft.y,b[f+2]=t.rgba.r,b[f+3]=t.rgba.g,b[f+4]=t.rgba.b,b[f+5]=t.rgba.a,b[f+6]=t.bottomLeft.x,b[f+7]=t.bottomLeft.y,b[f+8]=t.rgba.r,b[f+9]=t.rgba.g,b[f+10]=t.rgba.b,b[f+11]=t.rgba.a,b[f+12]=t.bottomRight.x,b[f+13]=t.bottomRight.y,b[f+14]=t.rgba.r,b[f+15]=t.rgba.g,b[f+16]=t.rgba.b,b[f+17]=t.rgba.a,b[f+18]=t.topRight.x,b[f+19]=t.topRight.y,b[f+20]=t.rgba.r,b[f+21]=t.rgba.g,b[f+22]=t.rgba.b,b[f+23]=t.rgba.a,m.push(p+0,p+1,p+2,p+2,p+3,p+0),p+=4,f+=24});const x=o.createBuffer();o.bindBuffer(o.ARRAY_BUFFER,x),o.bufferData(o.ARRAY_BUFFER,b,o.DYNAMIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null);const A=o.createBuffer();o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,A),o.bufferData(o.ELEMENT_ARRAY_BUFFER,new Uint16Array(m),o.STATIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null);let R=function(t,i,e,n,o,s){const r=1/(t-i),a=1/(e-n),h=1/(o-s);return new Float32Array([-2*r,0,0,0,0,-2*a,0,0,0,0,2*h,0,(t+i)*r,(n+e)*a,(s+o)*h,1])}(0,u,_,0,-1e3,1e3);const E=Date.now();!function t(){o.clearColor(0,0,0,1),o.clear(o.COLOR_BUFFER_BIT),o.enable(o.BLEND),o.blendFunc(o.ONE,o.ONE_MINUS_SRC_ALPHA),o.viewport(0,0,n.width,n.height),o.bindBuffer(o.ARRAY_BUFFER,x),o.bufferData(o.ARRAY_BUFFER,b,o.DYNAMIC_DRAW),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,A),o.vertexAttribPointer(g,2,o.FLOAT,!1,24,0),o.vertexAttribPointer(d,4,o.FLOAT,!1,24,8),o.uniform1f(c,Math.round(Date.now()-E)/1e3),o.uniform2f(l,u,_),o.uniformMatrix4fv(h,!1,R),o.drawElements(o.TRIANGLES,m.length,o.UNSIGNED_SHORT,0),requestAnimationFrame(t)}()}()}();
